#!/usr/bin/env goo

import "fmt"
	// Test different map syntax forms
	
	// 1. map{"key": value} syntax
	z1 := map{"a": 1, "b": 2}
	printf("map{} syntax: %v\n", z1)
	
	// 2. {key: value} syntax (symbol keys converted to strings)
	z2 := {a: 1, b: 2}
	printf("{} syntax: %v\n", z2)
	
	// 3. map[key: value] syntax
	z3 := map[active: true, age: 30, name: "Alice"]
	printf("map[] syntax: %v\n", z3)
	
	// Test mixed types
	z4 := map[count: 42, enabled: true, title: "test"]
	printf("mixed types: %v\n", z4)
	
	// Test map operations
	z1["a"] = 10
	printf("After modification: %v\n", z1)
	printf("Access z1[a]: %v\n", z1["a"])
	
	// Test map comparison  
	z5 := {a: 1, b: 2}
	printf("z2 == z5: %v\n", z2 == z5)
	
	// Test typeof
	printf("typeof(z1): %v\n", typeof(z1))
	printf("typeof(z2): %v\n", typeof(z2))
	printf("typeof(z3): %v\n", typeof(z3))
	
	// Test with fmt.Printf for comparison
	fmt.Printf("fmt.Printf z1: %v\n", z1)
	
	// Test empty maps
	empty1 := map{}
	empty2 := {}
	printf("empty map{}: %v\n", empty1)
	printf("empty {}: %v\n", empty2)
	
	// Test complex nesting
	nested := map{
		"user": {name: "John", age: 30},
		"settings": {theme: "dark", lang: "en"}
	}
	printf("nested: %v\n", nested)
